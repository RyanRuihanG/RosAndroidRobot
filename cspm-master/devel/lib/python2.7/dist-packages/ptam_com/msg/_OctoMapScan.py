"""autogenerated by genpy from ptam_com/OctoMapScan.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ptam_com.msg
import std_msgs.msg

class OctoMapScan(genpy.Message):
  _md5sum = "6300a17df88639b05a1a89ffdf26ee86"
  _type = "ptam_com/OctoMapScan"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """OctoMapPointArray mapPoints
geometry_msgs/PoseWithCovarianceStamped keyFramePose


================================================================================
MSG: ptam_com/OctoMapPointArray
OctoMapPointStamped[] mapPoints

================================================================================
MSG: ptam_com/OctoMapPointStamped
Header header
uint8 INSERT = 0
uint8 UPDATE = 1
uint8 DELETE = 2

uint8 action
geometry_msgs/Vector3 position

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['mapPoints','keyFramePose']
  _slot_types = ['ptam_com/OctoMapPointArray','geometry_msgs/PoseWithCovarianceStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mapPoints,keyFramePose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OctoMapScan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mapPoints is None:
        self.mapPoints = ptam_com.msg.OctoMapPointArray()
      if self.keyFramePose is None:
        self.keyFramePose = geometry_msgs.msg.PoseWithCovarianceStamped()
    else:
      self.mapPoints = ptam_com.msg.OctoMapPointArray()
      self.keyFramePose = geometry_msgs.msg.PoseWithCovarianceStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.mapPoints.mapPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.mapPoints.mapPoints:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.action))
        _v3 = val1.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.keyFramePose.header.seq, _x.keyFramePose.header.stamp.secs, _x.keyFramePose.header.stamp.nsecs))
      _x = self.keyFramePose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.keyFramePose.pose.pose.position.x, _x.keyFramePose.pose.pose.position.y, _x.keyFramePose.pose.pose.position.z, _x.keyFramePose.pose.pose.orientation.x, _x.keyFramePose.pose.pose.orientation.y, _x.keyFramePose.pose.pose.orientation.z, _x.keyFramePose.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.keyFramePose.pose.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.mapPoints is None:
        self.mapPoints = ptam_com.msg.OctoMapPointArray()
      if self.keyFramePose is None:
        self.keyFramePose = geometry_msgs.msg.PoseWithCovarianceStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mapPoints.mapPoints = []
      for i in range(0, length):
        val1 = ptam_com.msg.OctoMapPointStamped()
        _v4 = val1.header
        start = end
        end += 4
        (_v4.seq,) = _struct_I.unpack(str[start:end])
        _v5 = _v4.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.frame_id = str[start:end].decode('utf-8')
        else:
          _v4.frame_id = str[start:end]
        start = end
        end += 1
        (val1.action,) = _struct_B.unpack(str[start:end])
        _v6 = val1.position
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.mapPoints.mapPoints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.keyFramePose.header.seq, _x.keyFramePose.header.stamp.secs, _x.keyFramePose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyFramePose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.keyFramePose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.keyFramePose.pose.pose.position.x, _x.keyFramePose.pose.pose.position.y, _x.keyFramePose.pose.pose.position.z, _x.keyFramePose.pose.pose.orientation.x, _x.keyFramePose.pose.pose.orientation.y, _x.keyFramePose.pose.pose.orientation.z, _x.keyFramePose.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.keyFramePose.pose.covariance = _struct_36d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.mapPoints.mapPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.mapPoints.mapPoints:
        _v7 = val1.header
        buff.write(_struct_I.pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.action))
        _v9 = val1.position
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.keyFramePose.header.seq, _x.keyFramePose.header.stamp.secs, _x.keyFramePose.header.stamp.nsecs))
      _x = self.keyFramePose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.keyFramePose.pose.pose.position.x, _x.keyFramePose.pose.pose.position.y, _x.keyFramePose.pose.pose.position.z, _x.keyFramePose.pose.pose.orientation.x, _x.keyFramePose.pose.pose.orientation.y, _x.keyFramePose.pose.pose.orientation.z, _x.keyFramePose.pose.pose.orientation.w))
      buff.write(self.keyFramePose.pose.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.mapPoints is None:
        self.mapPoints = ptam_com.msg.OctoMapPointArray()
      if self.keyFramePose is None:
        self.keyFramePose = geometry_msgs.msg.PoseWithCovarianceStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mapPoints.mapPoints = []
      for i in range(0, length):
        val1 = ptam_com.msg.OctoMapPointStamped()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _struct_I.unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8')
        else:
          _v10.frame_id = str[start:end]
        start = end
        end += 1
        (val1.action,) = _struct_B.unpack(str[start:end])
        _v12 = val1.position
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.mapPoints.mapPoints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.keyFramePose.header.seq, _x.keyFramePose.header.stamp.secs, _x.keyFramePose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keyFramePose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.keyFramePose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.keyFramePose.pose.pose.position.x, _x.keyFramePose.pose.pose.position.y, _x.keyFramePose.pose.pose.position.z, _x.keyFramePose.pose.pose.orientation.x, _x.keyFramePose.pose.pose.orientation.y, _x.keyFramePose.pose.pose.orientation.z, _x.keyFramePose.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.keyFramePose.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_36d = struct.Struct("<36d")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
