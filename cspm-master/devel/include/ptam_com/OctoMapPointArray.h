// Generated by gencpp from file ptam_com/OctoMapPointArray.msg
// DO NOT EDIT!


#ifndef PTAM_COM_MESSAGE_OCTOMAPPOINTARRAY_H
#define PTAM_COM_MESSAGE_OCTOMAPPOINTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ptam_com/OctoMapPointStamped.h>

namespace ptam_com
{
template <class ContainerAllocator>
struct OctoMapPointArray_
{
  typedef OctoMapPointArray_<ContainerAllocator> Type;

  OctoMapPointArray_()
    : mapPoints()  {
    }
  OctoMapPointArray_(const ContainerAllocator& _alloc)
    : mapPoints(_alloc)  {
    }



   typedef std::vector< ::ptam_com::OctoMapPointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ptam_com::OctoMapPointStamped_<ContainerAllocator> >::other >  _mapPoints_type;
  _mapPoints_type mapPoints;




  typedef boost::shared_ptr< ::ptam_com::OctoMapPointArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam_com::OctoMapPointArray_<ContainerAllocator> const> ConstPtr;

}; // struct OctoMapPointArray_

typedef ::ptam_com::OctoMapPointArray_<std::allocator<void> > OctoMapPointArray;

typedef boost::shared_ptr< ::ptam_com::OctoMapPointArray > OctoMapPointArrayPtr;
typedef boost::shared_ptr< ::ptam_com::OctoMapPointArray const> OctoMapPointArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ptam_com::OctoMapPointArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ptam_com

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ptam_com': ['/home/meng/cspm/src/ethzasl_ptam/ptam_com/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ptam_com::OctoMapPointArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ptam_com::OctoMapPointArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ptam_com::OctoMapPointArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f65418a8cd445702b4ff05d157c76c47";
  }

  static const char* value(const ::ptam_com::OctoMapPointArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf65418a8cd445702ULL;
  static const uint64_t static_value2 = 0xb4ff05d157c76c47ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ptam_com/OctoMapPointArray";
  }

  static const char* value(const ::ptam_com::OctoMapPointArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "OctoMapPointStamped[] mapPoints\n\
\n\
================================================================================\n\
MSG: ptam_com/OctoMapPointStamped\n\
Header header\n\
uint8 INSERT = 0\n\
uint8 UPDATE = 1\n\
uint8 DELETE = 2\n\
\n\
uint8 action\n\
geometry_msgs/Vector3 position\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ptam_com::OctoMapPointArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapPoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct OctoMapPointArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptam_com::OctoMapPointArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ptam_com::OctoMapPointArray_<ContainerAllocator>& v)
  {
    s << indent << "mapPoints[]" << std::endl;
    for (size_t i = 0; i < v.mapPoints.size(); ++i)
    {
      s << indent << "  mapPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ptam_com::OctoMapPointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.mapPoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PTAM_COM_MESSAGE_OCTOMAPPOINTARRAY_H
